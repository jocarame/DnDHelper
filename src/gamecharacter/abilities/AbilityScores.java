package gamecharacter.abilities;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

/**
 * This class encapsulates ability scores for a character as described in PHB Chapter 1. 
 *
 * @author Justin Kaufman
 * @since 2013-03-18
 */
public class AbilityScores {

	/**
	 * Identifier for the ability score Strength.
	 */
	public static final int STRENGTH = 0;

	/**
	 * Identifier for the ability score Dexterity.
	 */
	public static final int DEXTERITY = 1;

	/**
	 * Identifier for the ability score Constitution.
	 */
	public static final int CONSTITUTION = 2;

	/**
	 * Identifier for the ability score Intelligence.
	 */
	public static final int INTELLIGENCE = 3;

	/**
	 * Identifier for the ability score Wisdom.
	 */
	public static final int WISDOM = 4;

	/**
	 * Identifier for the ability score Charisma.
	 */
	public static final int CHARISMA = 5;

	private int[] abilityScores;

	/**
	 * Ability score constructor that accepts specified ability scores.
	 * @param strength the ability score for strength
	 * @param dexterity the ability score for dexterity
	 * @param constitution the ability score for constitution
	 * @param intelligence the ability score for intelligence
	 * @param wisdom the ability score for wisdom
	 * @param charisma the ability score for charisma
	 */
	public AbilityScores(int strength, int dexterity, int constitution,
			int intelligence, int wisdom, int charisma)
	{
		abilityScores = new int[7];
		abilityScores[STRENGTH] = strength;
		abilityScores[DEXTERITY] = dexterity;
		abilityScores[CONSTITUTION] = constitution;
		abilityScores[INTELLIGENCE] = intelligence;
		abilityScores[WISDOM] = wisdom;
		abilityScores[CHARISMA] = charisma;
	}

	/**
	 * Ability score constructor that sets random scores.
	 */
	public AbilityScores()
	{
		abilityScores = new int[7];
		for(int i = 0; i < 7; i++)
			abilityScores[i] = rollAndDropLowest();
	}

	/**
	 * Ability score constructor that sets random scores, but ensures that the
	 * largest roll is in the chosen ability.
	 * @param ability the ability to set the maximal score
	 */
	public AbilityScores(int ability)
	{
		this(); // sets random scores
		int maxIndex = 0;
		for(int i = 0; i < 7; i++) { // get index of largest value
			if(abilityScores[i] > abilityScores[maxIndex])
				maxIndex = i;
		}
		swapScores(ability, maxIndex); // swap scores to desired ability
	}

	/**
	 * Calculates the modifier for a given ability score.
	 * @param score the ability score
	 * @return the modifier for the given ability score
	 */
	public static int calculateMod(int score)
	{
		if (score % 2 == 1) score--;
		return (score - 10) / 2;
	}

	public int getAbilityScore(int ability)
	{
		switch(ability) {
		case AbilityScores.STRENGTH: return getStr();
		case AbilityScores.DEXTERITY: return getDex();
		case AbilityScores.CONSTITUTION: return getCon();
		case AbilityScores.INTELLIGENCE: return getInt();
		case AbilityScores.WISDOM: return getWis();
		case AbilityScores.CHARISMA: return getCha();
		}
		return 0; /* unreachable */
	}
	
	public int[] getAbilityScores(){
		return abilityScores;
	}

	/**
	 * Rolls 4 d6's, drops the lowest of the d6 rolls, and returns the sum.
	 * This method is specified in PHB pg. 7
	 * @return a random ability score generated by 4d6 drop lowest strategy.
	 */
	private int rollAndDropLowest() {
		Random rng = new Random();
		ArrayList<Integer> diceRolls = new ArrayList<Integer>(4);
		for(int i = 0; i < 4; i++)
			diceRolls.add(rng.nextInt(6) + 1); // rolls a d6
		Collections.sort(diceRolls);
		diceRolls.remove(0); // drop lowest
		int sum = 0;
		for(Integer i : diceRolls)
			sum += i;
		return sum; // return sum
	}

	/**
	 * Swaps two ability scores given the identifiers a and b.
	 * @param a the identifier for the ability
	 * @param b the identifier for the ability
	 */
	private void swapScores(int a, int b) {
		int temp = abilityScores[b];
		abilityScores[b] = abilityScores[a];
		abilityScores[a] = temp;
	}

	/* Getters and Setters */

	/**
	 * Get the Strength ability score
	 * @return the strength ability score
	 */
	public int getStr() {
		return abilityScores[STRENGTH];
	}

	/**
	 * Sets the Strength ability score.
	 * @param score the strength ability score
	 */
	public void setStr(int score) {
		abilityScores[STRENGTH] = score;
	}

	/**
	 * Gets the Dexterity ability score.
	 * @return the dexterity ability score
	 */
	public int getDex() {
		return abilityScores[DEXTERITY];
	}

	/**
	 * Sets the Dexterity ability score.
	 * @param score the dexterity ability score
	 */
	public void setDex(int score) {
		abilityScores[DEXTERITY] = score;
	}

	/**
	 * Gets the Constitution ability score.
	 * @return the constitution ability score
	 */
	public int getCon() {
		return abilityScores[CONSTITUTION];
	}

	/**
	 * Sets the Constitution ability score.
	 * @param score the constitution ability score
	 */
	public void setCon(int score) {
		abilityScores[CONSTITUTION] = score;
	}

	/**
	 * Gets the Intelligence ability score.
	 * @return the intelligence ability score
	 */
	public int getInt() {
		return abilityScores[INTELLIGENCE];
	}

	/**
	 * Sets the Intelligence ability score.
	 * @param score the intelligence ability score
	 */
	public void setInt(int score) {
		abilityScores[INTELLIGENCE] = score;
	}

	/**
	 * Gets the Wisdom ability score.
	 * @return the wisdom ability score
	 */
	public int getWis() {
		return abilityScores[WISDOM];
	}

	/**
	 * Sets the Wisdom ability score.
	 * @param score the wisdom ability score
	 */
	public void setWis(int score) {
		abilityScores[WISDOM] = score;
	}

	/**
	 * Gets the Charisma ability score.
	 * @return the charisma ability score
	 */
	public int getCha() {
		return abilityScores[CHARISMA];
	}

	/**
	 * Sets the Charisma ability score.
	 * @param score the charisma ability score
	 */
	public void setCha(int score) {
		abilityScores[CHARISMA] = score;
	}
}